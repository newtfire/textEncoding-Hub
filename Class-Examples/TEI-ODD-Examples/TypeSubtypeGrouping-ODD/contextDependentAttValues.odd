<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_customization.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_customization.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:lang="en">
  <teiHeader>
    <fileDesc>
      <titleStmt>
	<title>Testing ODD for Constraining subtype and type attributes</title>
	<author>Elisa Beshero-Bondar</author>
      </titleStmt>
      <publicationStmt>
	<publisher>Digital Mitford Project</publisher>
      </publicationStmt>
      <sourceDesc>
	<p>born digital</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <head>Testing ODD for Constraining subtype and type attributes</head>
      <p>This ODD customization is just for testing whether we can customize a TEI element to hold attributes (@type and @subtype) 
      whose values depend on each other, without using Schematron. We know that we can do this with Relax NG, so can it be expressed in ODD?</p>
      <schemaSpec ident="contextDependentAttValues">    
	<desc>This ODD is designed to test whether we can customize attribute values in relation to one another, without using Schematron.</desc>
	<moduleRef key="tei"/>
	<moduleRef key="core"/>
	<moduleRef key="header"/>
	<moduleRef key="textstructure"/>
	<moduleRef key="namesdates"/>

	<elementSpec module="namesdates" ident="occupation" mode="replace">
	  <gloss>occupation</gloss>
	  <desc>contains an informal description of a person's trade,
	  profession or occupation. In the Digital Mitford project,
	  occupations are keyed with types and subtypes and used only
	  in the projectâ€™s personography lists.</desc>
	  <classes mode="replace">
	    <memberOf key="att.global"/>
	    <memberOf key="model.persStateLike"/>
	    <memberOf key="att.datable"/>
	    <memberOf key="att.editLike"/>
	    <memberOf key="att.naming"/>
	  </classes>
	  <content>
	    <elementRef key="roleName" minOccurs="0" maxOccurs="unbounded"/>
	  </content>
	  <!-- A choice of <attList> elements, each with a group of 1)
	       a single required value for @type, and 2) the values of
	       @subtype that goes with that @type -->
	  <attList org="choice">

	    <!-- type=educator -->
	    <attList org="group">
	      <attDef ident="type" mode="replace" usage="req">
		<valList type="closed">
		  <valItem ident="educator"/>
		</valList>
	      </attDef>
	      <attDef ident="subtype" mode="replace" usage="opt">
		<datatype>
		  <dataRef name="string"/>
		</datatype>
		<valList type="semi">
		  <valItem ident="teacher">
		    <desc>with type="educator".</desc>
		  </valItem>
		  <valItem ident="schoolHead">
		    <desc>with type="educator". (for headmistress, schoolmaster, etc.)</desc>
		  </valItem>
		  <valItem ident="governess">
		    <desc>with type="educator".</desc>
		  </valItem>
		  <valItem ident="tutor">
		    <desc>with type="educator".</desc>
		  </valItem>
		  <valItem ident="lecturer">
		    <desc>with type="educator". For public lecturers on educational topics.</desc>
		  </valItem>                          
		</valList>
	      </attDef>
	    </attList>

	    <!-- type=explorer -->
	    <attList org="group">
	      <attDef ident="type" mode="replace" usage="req">
		<valList type="closed">
		  <valItem ident="explorer"/>
		</valList>
	      </attDef>
	      <attDef ident="subtype" mode="replace" usage="opt">
		<datatype>
		  <dataRef name="string"/>
		</datatype>
		<valList type="semi">
		  <valItem ident="traveller">
		    <desc>with type="explorer".</desc>
		  </valItem>
		  <valItem ident="navigator">
		    <desc>with type="explorer".</desc>
		  </valItem>
		  <valItem ident="cartographer">
		    <desc>with type="explorer".</desc>
		  </valItem>
		  <valItem ident="seaCaptain"> 
		    <desc>with type="explorer". Commands a ship, distinct from military post.</desc>
		  </valItem>
		</valList>
	      </attDef>
	    </attList>

	    <!-- type=literary -->
	    <attList org="group">
	      <attDef ident="type" mode="replace" usage="req">
		<valList type="closed"> 
		  <valItem ident="literary"/>
		</valList>
	      </attDef>
	      <attDef ident="subtype" mode="replace" usage="opt">
		<datatype>
		  <dataRef name="string"/>
		</datatype>
		<valList type="semi">
		  <!--Subtypes related to type="literary" -->
		  <valItem ident="novelist">
		    <desc>with type="literary".</desc>
		  </valItem>
		  <valItem ident="poet">
		    <desc>with type="literary".</desc>
		  </valItem>
		  <valItem ident="playwright">
		    <desc>with type="literary".</desc>
		  </valItem>
		  <valItem ident="essayist">
		    <desc>with type="literary". For essayists who are not primarily writing specific literary/art reviews, but more broad-ranging philosophical or aesthetic writings.</desc>
		  </valItem>
		  <valItem ident="critic">
		    <desc>with type="literary". For literary, theatre / art critics and reviewers.</desc>
		  </valItem>
		  <valItem ident="journalist">
		    <desc>with type="literary".</desc>
		  </valItem>
		  <valItem ident="editor">
		    <desc>with type="literary".</desc>
		  </valItem>
		  <valItem ident="biographer">
		    <desc>with type="literary".</desc>
		  </valItem>
		  <valItem ident="autobiographer">
		    <desc>with type="literary".</desc>
		  </valItem>
		  <valItem ident="lexicographer">
		    <desc>with type="literary".</desc>
		  </valItem>
		  <valItem ident="linguist">
		    <desc>with type="literary". For those who systemically study languages, not simply translators.</desc>
		  </valItem>
		  <valItem ident="translator">
		    <desc>with type="literary".</desc>
		  </valItem>		  
		</valList>
	      </attDef>
	    </attList>

	    <!-- type=scholar -->
	    <attList org="group">
	      <attDef ident="type" mode="replace" usage="req">
		<valList type="closed">
		  <valItem ident="scholar"/>
		</valList>
	      </attDef>
	      <attDef ident="subtype" mode="replace" usage="opt">
		<datatype>
		  <dataRef name="string"/>
		</datatype>
		<valList type="semi"> 
		  <valItem ident="philosopher">
		    <desc>with type="scholar". Distinct from natural philosopher.</desc>
		  </valItem>
		  <valItem ident="naturalist">
		    <desc>with type="scholar". Covers the natural sciences and earth sciences, and includes biologist, botanist, ornithologist, geologist, etc.</desc>
		  </valItem>
		  <valItem ident="astronomer">
		    <desc>with type="scholar".</desc>
		</valItem></valList>
	      </attDef>
	    </attList>
	    
	  </attList>
	</elementSpec>            
	
      </schemaSpec>
    </body>
  </text>
</TEI>
